import tkinter as tk
import customtkinter as ctk
from tkinter import ttk, messagebox, filedialog
from stock_management import StockManager, Product
from datetime import datetime
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
import shutil
import os
from PIL import Image, ImageTk
import json

# Renk ≈üemasƒ±
COLORS = {
    'primary': '#845EC2',          # Mor
    'secondary': '#4B4453',        # Koyu gri-mor
    'accent': '#00C9A7',           # Turkuaz
    'background': '#1A1A1A',       # Koyu arka plan
    'card': '#2D2D2D',             # Kart arka planƒ±
    'text': '#FAFFFD',             # Beyaz
    'text_secondary': '#B8B8B8',   # Gri
    'border': '#363636',           # Kenarlƒ±k
    'table_header': '#2D2D2D',     # Tablo ba≈ülƒ±k
    'table_row_even': '#2D2D2D',   # √áift satƒ±rlar
    'table_row_odd': '#333333',    # Tek satƒ±rlar
    'table_text': '#B8B8B8',       # Tablo metin rengi
    'table_header_text': '#845EC2' # Tablo ba≈ülƒ±k yazƒ± rengi
}

def initialize_app():
    # Belgeler klas√∂r√ºnde uygulama klas√∂r√º olu≈ütur
    app_folder = os.path.join(os.path.expanduser("~"), "Documents", "Stok Y√∂netim")
    if not os.path.exists(app_folder):
        os.makedirs(app_folder)
    
    # Gerekli dosyalarƒ± olu≈ütur
    products_file = os.path.join(app_folder, "products.json")
    if not os.path.exists(products_file):
        with open(products_file, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False, indent=4)
    
    return app_folder

class ModernStockApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Uygulama klas√∂r√ºn√º ba≈ülat
        self.app_folder = initialize_app()
        
        # G√∂r√ºn√ºm kalitesi ayarlarƒ±
        self.tk.call('tk', 'scaling', 2.0)  # HiDPI desteƒüi
        
        # Font kalitesi i√ßin
        try:
            # Windows i√ßin font kalitesi
            from ctypes import windll
            windll.shcore.SetProcessDpiAwareness(1)
        except:
            pass
        
        # MacOS i√ßin font kalitesi
        try:
            self.tk.call('tk', 'scaling', 2.0)
            self.tk.call('ns', 'window', '.', '-scale', '2.0')
        except:
            pass
        
        # Font tanƒ±mlamalarƒ±
        self.FONTS = {
            'header': ctk.CTkFont(family="Segoe UI", size=18, weight="bold"),    # 20'den 18'e
            'subheader': ctk.CTkFont(family="Segoe UI", size=15, weight="bold"), # 16'dan 15'e
            'normal': ctk.CTkFont(family="Segoe UI", size=12),                   # 13'ten 12'ye
            'small': ctk.CTkFont(family="Segoe UI", size=11),                    # 12'den 11'e
            'large': ctk.CTkFont(family="Segoe UI", size=22, weight="bold"),     # 24'ten 22'ye
            'button': ctk.CTkFont(family="Segoe UI", size=12, weight="bold"),    # 13'ten 12'ye
            'table': ('Segoe UI', 12),                                           # 13'ten 12'ye
            'table_header': ('Segoe UI', 12, 'bold')                             # 13'ten 12'ye
        }
        
        # Ana pencere ayarlarƒ±
        self.title("Stok Y√∂netim Sistemi")
        self.geometry("1400x800")
        self.configure(fg_color=COLORS['background'])
        
        self.stock_manager = StockManager()
        
        # Ana grid yapƒ±sƒ±
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Sol men√º
        self.sidebar_frame = ctk.CTkFrame(
            self,
            width=250,
            fg_color=COLORS['card'],
            corner_radius=0
        )
        self.sidebar_frame.grid(row=0, column=0, sticky="nsew")
        self.sidebar_frame.grid_propagate(False)  # Sabit geni≈ülik
        
        # Men√º butonlarƒ±nƒ± olu≈ütur
        self.create_sidebar_buttons()
        
        # Ana i√ßerik alanƒ±
        self.content_frame = ctk.CTkFrame(self)
        self.content_frame.grid(row=0, column=1, sticky="nsew", padx=20, pady=20)
        
        # Tablo stilini ayarla
        self.configure_treeview_style()
        
        # Ba≈ülangƒ±√ß sayfasƒ±nƒ± g√∂ster
        self.show_dashboard()
        
        # Beden se√ßenekleri
        self.size_options = {
            "Pantolon": ["26", "28", "30", "32", "34", "36", "38", "40", "42", "44"],
            "Ti≈ü√∂rt": ["XS", "S", "M", "L", "XL", "2XL"],
            "G√∂mlek": ["XS", "S", "M", "L", "XL", "2XL", 
                      "36", "38", "40", "42", "44"],
            "Elbise": ["XS", "S", "M", "L", "XL", "2XL",
                      "36", "38", "40", "42", "44"],
            "Ceket": ["XS", "S", "M", "L", "XL", "2XL",
                     "46", "48", "50", "52", "54"],
            "Ayakkabƒ±": ["36", "37", "38", "39", "40", "41", "42", "43", "44", "45"],
            "Aksesuar": ["Standart", "S", "M", "L", "XL", "Tek Ebat"],
            "≈ûort": ["XS", "S", "M", "L", "XL", "2XL"],
            "E≈üofman": ["XS", "S", "M", "L", "XL", "2XL"],
            "Sweatshirt": ["XS", "S", "M", "L", "XL", "2XL"],
            "Mont": ["XS", "S", "M", "L", "XL", "2XL"],
            "Hƒ±rka": ["XS", "S", "M", "L", "XL", "2XL"],
            "ƒ∞√ß Giyim": ["XS", "S", "M", "L", "XL", "2XL"],
            "√áanta": ["Mini", "K√º√ß√ºk", "Orta", "B√ºy√ºk", "Tek Ebat"],
            "√áorap": ["35-38", "39-42", "43-46", "Standart"]
        }
        
        # Kategoriler
        self.categories = ["Se√ßiniz..."] + list(self.size_options.keys())
        
        # Se√ßili bedenleri tutacak liste
        self.selected_sizes = []

        # G√ºncelleme kontrol√º
        self.after(1000, self.check_updates)  # Program ba≈üladƒ±ktan 1 saniye sonra kontrol et

    def create_sidebar_buttons(self):
        # Logo alanƒ± i√ßin frame
        logo_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        logo_frame.pack(fill="x", padx=15, pady=15)
        
        # Modern logo container
        logo_container = ctk.CTkFrame(
            logo_frame, 
            fg_color=COLORS['primary'],
            corner_radius=12,
            height=60
        )
        logo_container.pack(fill="x", padx=5)
        logo_container.pack_propagate(False)
        
        # Logo yazƒ±sƒ± i√ßin frame
        text_frame = ctk.CTkFrame(logo_container, fg_color="transparent")
        text_frame.place(relx=0.5, rely=0.5, anchor="center")
        
        # Ana ba≈ülƒ±k
        ctk.CTkLabel(
            text_frame,
            text="STOK Y√ñNETƒ∞M",
            font=ctk.CTkFont(family="Segoe UI", size=18, weight="bold"),
            text_color=COLORS['text']
        ).pack()
        
        # Alt ba≈ülƒ±k
        ctk.CTkLabel(
            text_frame,
            text="Sƒ∞STEMƒ∞",
            font=ctk.CTkFont(family="Segoe UI", size=16, weight="bold"),  # Boyut ve kalƒ±nlƒ±k artƒ±rƒ±ldƒ±
            text_color=COLORS['text']  # Ana ba≈ülƒ±kla aynƒ± renk
        ).pack()
        
        # Men√º butonlarƒ± i√ßin frame
        menu_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        menu_frame.pack(fill="x", pady=10)
        
        buttons = [
            {
                "text": "Ana Sayfa",
                "icon": "üè†",
                "command": self.show_dashboard
            },
            {
                "text": "√úr√ºn Ekle",
                "icon": "‚ûï",
                "command": self.show_add_product
            },
            {
                "text": "Stok Hareket",
                "icon": "üîÑ",
                "command": self.show_stock_movement
            },
            {
                "text": "√úr√ºn Listesi",
                "icon": "üìã",
                "command": self.show_product_list
            },
            {
                "text": "Raporlar",
                "icon": "üìä",
                "command": self.show_reports
            },
            {
                "text": "Ayarlar",
                "icon": "‚öôÔ∏è",
                "command": self.show_settings
            }
        ]
        
        for button in buttons:
            btn = ctk.CTkButton(
                menu_frame,
                text=f"{button['icon']} {button['text']}",
                command=button['command'],
                font=ctk.CTkFont(family="Segoe UI", size=14, weight="bold"),
                height=50,
                anchor="w",
                fg_color="transparent",
                text_color=COLORS['text'],
                hover_color=COLORS['primary'],
                corner_radius=10
            )
            btn.pack(fill="x", padx=10, pady=5)
        
        # Alt bilgi
        footer_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        footer_frame.pack(fill="x", side="bottom", pady=20)
        
        version_label = ctk.CTkLabel(
            footer_frame,
            text="v1.0.0",
            font=self.FONTS['small'],
            text_color=COLORS['text_secondary']
        )
        version_label.pack()

    def show_dashboard(self):
        self.clear_content()
        
        # √úst bilgi kartlarƒ±
        info_frame = ctk.CTkFrame(self.content_frame)
        info_frame.pack(fill="x", padx=20, pady=10)
        info_frame.grid_columnconfigure((0,1,2,3,4), weight=1)
        
        # Bug√ºn√ºn tarihi
        today = datetime.now().date()
        
        # Bug√ºnk√º ve aylƒ±k satƒ±≈ü hesaplamalarƒ±
        today_movements = [m for m in self.stock_manager.stock_movements 
                          if m.date.date() == today]
        
        # Bug√ºnk√º satƒ±≈ülar
        today_sales = sum(
            self.stock_manager.products[m.product_id].price * m.quantity
            for m in today_movements
            if m.movement_type == "√ßƒ±kƒ±≈ü" 
            and m.product_id in self.stock_manager.products
        )
        
        # Aylƒ±k satƒ±≈ülar
        monthly_sales = sum(
            self.stock_manager.products[m.product_id].price * m.quantity
            for m in self.stock_manager.stock_movements
            if m.movement_type == "√ßƒ±kƒ±≈ü" 
            and (today - m.date.date()).days <= 30
            and m.product_id in self.stock_manager.products
        )
        
        # Bug√ºnk√º i≈ülem sayƒ±larƒ±
        today_inputs = [m for m in today_movements if m.movement_type == "giri≈ü"]
        today_outputs = [m for m in today_movements if m.movement_type == "√ßƒ±kƒ±≈ü"]
        
        # G√ºnl√ºk ve aylƒ±k kar hesapla
        daily_profit = self.stock_manager.calculate_daily_profit()
        monthly_profit = self.stock_manager.calculate_monthly_profit()
        
        # ƒ∞statistik kartlarƒ±
        self.create_stat_card(
            info_frame,
            "Toplam √úr√ºn",
            f"{len(self.stock_manager.products)} adet",
            "üì¶",
            0
        )

        # Bug√ºnk√º i≈ülemler kartƒ±nƒ± g√ºncelle
        total_movements = len(today_inputs) + len(today_outputs)
        self.create_stat_card(
            info_frame,
            "Bug√ºnk√º ƒ∞≈ülemler",
            f"{total_movements} hareket",
            "üîÑ",
            1
        )

        self.create_stat_card(
            info_frame,
            "Bug√ºnk√º Kar",
            f"{daily_profit:.2f} TL",
            "üí∞",
            2
        )

        self.create_stat_card(
            info_frame,
            "Aylƒ±k Kar",
            f"{monthly_profit:.2f} TL",
            "üìà",
            3
        )

        self.create_stat_card(
            info_frame,
            "Toplam Deƒüer",
            f"{sum(p.price * p.stock_quantity for p in self.stock_manager.products.values()):.2f} TL",
            "üíµ",
            4
        )

        # Alt b√∂l√ºm i√ßin frame
        content_frame = ctk.CTkFrame(self.content_frame)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Grid yapƒ±landƒ±rmasƒ± - her h√ºcreye e≈üit aƒüƒ±rlƒ±k ver
        content_frame.grid_columnconfigure(0, weight=1, uniform="table")
        content_frame.grid_columnconfigure(1, weight=1, uniform="table")
        content_frame.grid_rowconfigure(0, weight=1, uniform="table")
        content_frame.grid_rowconfigure(1, weight=1, uniform="table")
        
        # Tablolar
        self.create_low_stock_table(content_frame, 0, 0)
        self.create_recent_movements_table(content_frame, 0, 1)
        self.create_inactive_products_table(content_frame, 1, 0)
        self.create_popular_products_table(content_frame, 1, 1)

    def create_low_stock_table(self, parent, row, column):
        frame = self.create_table_frame(parent, "Kritik Stok Seviyeleri", "‚ö†Ô∏è", row, column)
        
        columns = ('√úr√ºn', 'Stok', 'Minimum')
        tree = self.create_table(frame, columns)
        
        low_stock = self.stock_manager.list_low_stock_products()
        for product in low_stock:
            self.insert_with_tags(tree, (
                product.name,
                f"üì¶ {product.stock_quantity}",  # Emoji ekle
                f"‚ö†Ô∏è {5}"  # Minimum stok i√ßin emoji
            ))
        
        tree.pack(fill="both", expand=True, padx=10, pady=10)

    def create_inactive_products_table(self, parent, row, column):
        frame = self.create_table_frame(parent, "Hareketsiz √úr√ºnler (30+ g√ºn)", "‚è∞", row, column)
        
        # Tablo
        columns = ('√úr√ºn', 'Son Hareket', 'Stok')
        tree = self.create_table(frame, columns)
        
        # Son 30 g√ºn i√ßinde hareketi olmayan √ºr√ºnler
        today = datetime.now()
        inactive_products = []
        
        for product in self.stock_manager.products.values():
            last_movement = None
            for movement in reversed(self.stock_manager.stock_movements):
                if movement.product_id == product.id:
                    last_movement = movement
                    break
            
            if last_movement is None or (today - last_movement.date).days > 30:
                inactive_products.append((
                    product,
                    last_movement.date if last_movement else "Hi√ß hareket yok"
                ))
        
        for product, last_date in inactive_products:
            self.insert_with_tags(tree, (product.name, last_date if isinstance(last_date, str) else last_date.strftime('%Y-%m-%d'), product.stock_quantity))
        
        tree.pack(fill="both", expand=True, padx=5, pady=5)

    def create_popular_products_table(self, parent, row, column):
        frame = self.create_table_frame(parent, "En √áok Satan √úr√ºnler", "üî•", row, column)
        
        # Tablo
        columns = ('√úr√ºn', 'Satƒ±≈ü Adedi', 'Stok')
        tree = self.create_table(frame, columns)
        
        # Verileri ekle
        today = datetime.now()
        product_sales = {}
        
        for movement in self.stock_manager.stock_movements:
            if movement.movement_type == "√ßƒ±kƒ±≈ü" and (today - movement.date).days <= 30:
                if movement.product_id not in product_sales:
                    product_sales[movement.product_id] = 0
                product_sales[movement.product_id] += movement.quantity
        
        popular_products = sorted(
            product_sales.items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]
        
        for product_id, sales in popular_products:
            product = self.stock_manager.products.get(product_id)
            if product:
                self.insert_with_tags(tree, (product.name, sales, product.stock_quantity))
        
        tree.pack(fill="both", expand=True, padx=5, pady=5)

    def create_stat_card(self, parent, title, value, icon, column):
        card = ctk.CTkFrame(parent, fg_color=COLORS['card'], corner_radius=15)
        card.grid(row=0, column=column, padx=5, pady=5, sticky="nsew")
        
        # ƒ∞kon
        icon_label = ctk.CTkLabel(
            card,
            text=icon,
            font=ctk.CTkFont(size=32),  # Eski haline d√∂nd√º (24'ten 32'ye)
            text_color=COLORS['primary']
        )
        icon_label.pack(pady=(15, 5))
        
        # Deƒüer
        value_label = ctk.CTkLabel(
            card,
            text=value,
            font=ctk.CTkFont(size=24, weight="bold"),  # Eski haline d√∂nd√º (18'den 24'e)
            text_color=COLORS['text']
        )
        value_label.pack(pady=5)
        
        # Ba≈ülƒ±k
        title_label = ctk.CTkLabel(
            card,
            text=title,
            font=ctk.CTkFont(size=14),  # Eski haline d√∂nd√º (12'den 14'e)
            text_color=COLORS['text_secondary']
        )
        title_label.pack(pady=(5, 15))

    def create_recent_movements_table(self, parent, row, column):
        # Tablo frame'i olu≈ütur
        frame = self.create_table_frame(parent, "Son Hareketler", "üîÑ", row, column)
        
        # Tablo
        columns = ('Tarih', '√úr√ºn', 'ƒ∞≈ülem', 'Miktar')
        tree = self.create_table(frame, columns)
        
        # Son 10 hareketi al ve sƒ±rala
        movements = sorted(
            self.stock_manager.stock_movements,
            key=lambda x: x.date,
            reverse=True
        )[:10]
        
        # Hareketleri tabloya ekle
        for movement in movements:
            product = self.stock_manager.products.get(movement.product_id)
            if product:
                # ƒ∞≈ülem tipini ve satƒ±≈ü yerini belirle
                if movement.movement_type == "giri≈ü":
                    operation = "üì• Giri≈ü"
                else:
                    # A√ßƒ±klamadan satƒ±≈ü yerini √ßƒ±kar
                    if "Satƒ±≈ü Yeri:" in movement.description:
                        sale_place = movement.description.split("|")[0].replace("Satƒ±≈ü Yeri:", "").strip()
                        operation = f"üì§ √áƒ±kƒ±≈ü ({sale_place})"
                    else:
                        operation = "üì§ √áƒ±kƒ±≈ü"
                
                # Tabloyu doldur
                self.insert_with_tags(tree, (
                    movement.date.strftime("%d.%m.%Y %H:%M"),
                    product.name,
                    operation,
                    movement.quantity
                ))
        
        tree.pack(fill="both", expand=True, padx=5, pady=5)

    def show_add_product(self):
        self.clear_content()
        
        # Ana container
        container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=40, pady=20)
        
        # Ba≈ülƒ±k
        header_frame = ctk.CTkFrame(container, fg_color=COLORS['primary'], corner_radius=10)
        header_frame.pack(fill="x", padx=2, pady=2)
        
        ctk.CTkLabel(
            header_frame,
            text="‚ûï Yeni √úr√ºn Ekle",
            font=self.FONTS['header'],
            text_color=COLORS['text']
        ).pack(pady=15)
        
        # Form container
        form_frame = ctk.CTkFrame(container, fg_color=COLORS['card'], corner_radius=10)
        form_frame.pack(fill="x", pady=10, padx=2)
        
        # Form alanlarƒ± i√ßin grid yapƒ±landƒ±rmasƒ±
        form_frame.grid_columnconfigure(1, weight=1)
        
        # Form alanlarƒ±
        self.product_entries = {}
        self.selected_sizes = []  # Se√ßili bedenleri tutacak liste
        
        fields = [
            {'label': '√úr√ºn ID', 'key': 'id', 'icon': 'üè∑Ô∏è', 'type': 'entry'},
            {'label': '√úr√ºn Adƒ±', 'key': 'name', 'icon': 'üìù', 'type': 'entry'},
            {'label': 'Kategori', 'key': 'category', 'icon': 'üìÅ', 'type': 'combobox', 
             'values': ["Se√ßiniz...", "Pantolon", "Ti≈ü√∂rt", "G√∂mlek", "Elbise", "Ceket", "Ayakkabƒ±"]},
            {'label': 'Cinsiyet', 'key': 'gender', 'icon': 'üë§', 'type': 'combobox', 
             'values': ["Se√ßiniz...", "Erkek", "Kadƒ±n", "Unisex"]},
            {'label': 'Beden', 'key': 'size', 'icon': 'üìè', 'type': 'size_buttons'},
            {'label': 'Renk', 'key': 'color', 'icon': 'üé®', 'type': 'combobox', 
             'values': ["Se√ßiniz...", "Siyah", "Beyaz", "Kƒ±rmƒ±zƒ±", "Mavi", "Ye≈üil", "Lacivert"]},
            {'label': 'Alƒ±≈ü Fiyatƒ±', 'key': 'purchase_price', 'icon': 'üí∞', 'type': 'entry'},
            {'label': 'Satƒ±≈ü Fiyatƒ±', 'key': 'price', 'icon': 'üíµ', 'type': 'entry'},
            {'label': 'Fotoƒüraf', 'key': 'image', 'icon': 'üì∏', 'type': 'image'}  # Yeni alan
        ]
        
        def update_size_buttons(category):
            # Eski beden butonlarƒ±nƒ± temizle
            for widget in size_frame.winfo_children():
                widget.destroy()
            
            # Se√ßili bedenleri sƒ±fƒ±rla
            self.selected_sizes.clear()
            
            if category == "Se√ßiniz...":
                # Kategori se√ßilmediƒüinde mesaj g√∂ster
                ctk.CTkLabel(
                    size_frame,
                    text="L√ºtfen √∂nce kategori se√ßiniz",
                    font=self.FONTS['normal'],
                    text_color=COLORS['text_secondary']
                ).pack(pady=10)
                return
            
            # Kategoriye g√∂re bedenleri al
            sizes = self.size_options[category]
            
            # Beden butonlarƒ± i√ßin frame
            buttons_frame = ctk.CTkFrame(size_frame, fg_color="transparent")
            buttons_frame.pack(fill="x", padx=10, pady=5)
            
            # Beden butonlarƒ±nƒ± olu≈ütur
            for j, size in enumerate(sizes):
                btn = ctk.CTkButton(
                    buttons_frame,
                    text=size,
                    width=50,
                    height=30,
                    fg_color="transparent",
                    text_color=COLORS['text'],
                    hover_color=COLORS['secondary'],
                    border_width=1,
                    border_color=COLORS['border']
                )
                btn.grid(row=j//6, column=j%6, padx=2, pady=2)
                
                def toggle_size(s=size, b=btn):
                    if s in self.selected_sizes:
                        self.selected_sizes.remove(s)
                        b.configure(fg_color="transparent", text_color=COLORS['text'])
                    else:
                        self.selected_sizes.append(s)
                        b.configure(fg_color=COLORS['primary'], text_color=COLORS['text'])
                
                btn.configure(command=lambda s=size, b=btn: toggle_size(s, b))
            
            # Se√ßili bedenleri g√∂stermek i√ßin etiket
            self.size_label = ctk.CTkLabel(
                size_frame,
                text="Se√ßili bedenler: ",
                font=self.FONTS['small'],
                text_color=COLORS['text_secondary']
            )
            self.size_label.pack(pady=10)
        
        # Form alanlarƒ±nƒ± olu≈ütur
        for i, field in enumerate(fields):
            # Etiket
            ctk.CTkLabel(
                form_frame,
                text=f"{field['icon']} {field['label']}:",
                font=self.FONTS['normal'],
                text_color=COLORS['text_secondary']
            ).grid(row=i, column=0, padx=(20,10), pady=10, sticky="e")
            
            if field['type'] == 'size_buttons':
                # Beden butonlarƒ± i√ßin frame
                size_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
                size_frame.grid(row=i, column=1, padx=(0,20), pady=10, sticky="ew")
                
                # Ba≈ülangƒ±√ßta mesaj g√∂ster
                ctk.CTkLabel(
                    size_frame,
                    text="L√ºtfen √∂nce kategori se√ßiniz",
                    font=self.FONTS['normal'],
                    text_color=COLORS['text_secondary']
                ).pack(pady=10)
                continue
            
            elif field['key'] == 'category':
                combo = ctk.CTkComboBox(
                    form_frame,
                    height=40,
                    font=self.FONTS['normal'],
                    values=field['values'],
                    state="readonly",
                    command=update_size_buttons  # Kategori deƒüi≈ütiƒüinde bedenleri g√ºncelle
                )
                combo.grid(row=i, column=1, padx=(0,20), pady=10, sticky="ew")
                combo.set(field['values'][0])
                self.product_entries[field['key']] = combo
                continue
            
            # Giri≈ü alanƒ± veya combobox
            if field['type'] == 'entry':
                entry = ctk.CTkEntry(
                    form_frame,
                    height=40,
                    font=self.FONTS['normal'],
                    placeholder_text=f"{field['label']} giriniz..."
                )
                entry.grid(row=i, column=1, padx=(0,20), pady=10, sticky="ew")
                self.product_entries[field['key']] = entry
            elif field['type'] == 'combobox':
                combo = ctk.CTkComboBox(
                    form_frame,
                    height=40,
                    font=self.FONTS['normal'],
                    values=field['values'],
                    state="readonly"
                )
                combo.grid(row=i, column=1, padx=(0,20), pady=10, sticky="ew")
                combo.set(field['values'][0])
                self.product_entries[field['key']] = combo
            elif field['type'] == 'image':
                # Fotoƒüraf se√ßme alanƒ± i√ßin frame
                image_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
                image_frame.grid(row=i, column=1, padx=(0,20), pady=10, sticky="ew")
                
                # Fotoƒüraf √∂nizleme alanƒ±
                preview_frame = ctk.CTkFrame(image_frame, width=150, height=150)
                preview_frame.grid(row=0, column=0, padx=5)
                preview_frame.grid_propagate(False)
                
                # √ñnizleme etiketi
                preview_label = ctk.CTkLabel(
                    preview_frame,
                    text="√ñnizleme",
                    font=self.FONTS['small']
                )
                preview_label.place(relx=0.5, rely=0.5, anchor="center")
                
                # Butonlar i√ßin frame
                button_frame = ctk.CTkFrame(image_frame, fg_color="transparent")
                button_frame.grid(row=0, column=1, padx=5)
                
                def select_image():
                    file_path = filedialog.askopenfilename(
                        title="Fotoƒüraf Se√ß",
                        filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp")]
                    )
                    if file_path:
                        try:
                            # Resmi y√ºkle ve boyutlandƒ±r
                            image = Image.open(file_path)
                            image.thumbnail((140, 140))  # √ñnizleme boyutu
                            photo = ImageTk.PhotoImage(image)
                            
                            # √ñnizleme etiketini g√ºncelle
                            preview_label.configure(image=photo, text="")
                            preview_label.image = photo  # Referansƒ± koru
                            
                            # Dosya yolunu sakla
                            self.product_entries['image'] = file_path
                            
                        except Exception as e:
                            messagebox.showerror("Hata", f"Fotoƒüraf y√ºklenirken hata olu≈ütu: {str(e)}")

                def remove_image():
                    preview_label.configure(image="", text="√ñnizleme")
                    self.product_entries['image'] = None
                
                # Fotoƒüraf se√ß butonu
                select_button = ctk.CTkButton(
                    button_frame,
                    text="Fotoƒüraf Se√ß",
                    font=self.FONTS['normal'],
                    height=35,
                    command=select_image
                )
                select_button.pack(pady=5)
                
                # Fotoƒüraf kaldƒ±r butonu
                remove_button = ctk.CTkButton(
                    button_frame,
                    text="Fotoƒürafƒ± Kaldƒ±r",
                    font=self.FONTS['normal'],
                    height=35,
                    fg_color="transparent",
                    border_width=1,
                    command=remove_image
                )
                remove_button.pack(pady=5)
                
                # Ba≈ülangƒ±√ßta None olarak ayarla
                self.product_entries['image'] = None
        
        # Kaydet butonu
        save_button = ctk.CTkButton(
            form_frame,
            text="üíæ Kaydet",
            font=self.FONTS['button'],
            height=40,
            command=self.save_product
        )
        save_button.grid(row=len(fields), column=0, columnspan=2, pady=20)

    def save_product(self):
        try:
            # Form verilerini al
            product_data = {
                'id': self.product_entries['id'].get(),
                'name': self.product_entries['name'].get(),
                'category': self.product_entries['category'].get(),
                'gender': self.product_entries['gender'].get(),
                'size': ", ".join(self.selected_sizes),
                'color': self.product_entries['color'].get(),
                'purchase_price': float(self.product_entries['purchase_price'].get()),
                'price': float(self.product_entries['price'].get()),
                'image_path': self.product_entries['image']  # Fotoƒüraf yolu eklendi
            }
            
            # Bo≈ü alan kontrol√º
            for key, value in product_data.items():
                if value == "" or value == "Se√ßiniz...":
                    messagebox.showerror("Hata", "L√ºtfen t√ºm alanlarƒ± doldurunuz!")
                    return
            
            # Fiyat kontrol√º
            if product_data['purchase_price'] <= 0 or product_data['price'] <= 0:
                messagebox.showerror("Hata", "Fiyatlar 0'dan b√ºy√ºk olmalƒ±dƒ±r!")
                return
            
            # √úr√ºn√º olu≈ütur ve kaydet
            new_product = Product(**product_data)
            if self.stock_manager.add_product(new_product):
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "√úr√ºn ba≈üarƒ±yla eklendi!")
                self.show_dashboard()
            
        except ValueError:
            messagebox.showerror("Hata", "L√ºtfen ge√ßerli fiyat deƒüerleri giriniz!")
        except Exception as e:
            messagebox.showerror("Hata", str(e))

    def show_stock_movement(self):
        self.clear_content()
        
        # Ana container
        container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=40, pady=20)
        
        # Grid yapƒ±landƒ±rmasƒ±
        container.grid_columnconfigure(0, weight=3)  # Form i√ßin
        container.grid_columnconfigure(1, weight=1)  # Bilgi kartƒ± i√ßin
        container.grid_rowconfigure(0, weight=1)
        
        # Sol panel - Form
        form_frame = ctk.CTkFrame(container, corner_radius=15)
        form_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        
        # Ba≈ülƒ±k
        header_frame = ctk.CTkFrame(form_frame, fg_color=COLORS['primary'], corner_radius=10)
        header_frame.pack(fill="x", padx=2, pady=2)
        
        ctk.CTkLabel(
            header_frame,
            text="üîÑ Stok Hareket ƒ∞≈ülemi",
            font=self.FONTS['header'],
            text_color=COLORS['text']
        ).pack(pady=15)
        
        # Form i√ßeriƒüi
        content_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=30, pady=20)
        
        # Grid yapƒ±landƒ±rmasƒ±
        content_frame.grid_columnconfigure(1, weight=1)
        
        # √úr√ºn se√ßimi
        ctk.CTkLabel(
            content_frame,
            text="üì¶ √úr√ºn Se√ßimi",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=0, column=0, padx=(0, 10), pady=10, sticky="e")
        
        product_combobox = ctk.CTkComboBox(
            content_frame,
            values=[f"{p.id} - {p.name}" for p in self.stock_manager.products.values()],
            height=40,
            font=self.FONTS['normal']
        )
        product_combobox.grid(row=0, column=1, pady=10, sticky="ew")
        
        # Miktar
        ctk.CTkLabel(
            content_frame,
            text="üî¢ Miktar",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=1, column=0, padx=(0, 10), pady=10, sticky="e")
        
        quantity_entry = ctk.CTkEntry(
            content_frame,
            height=40,
            font=self.FONTS['normal'],
            placeholder_text="Miktar giriniz..."
        )
        quantity_entry.grid(row=1, column=1, pady=10, sticky="ew")
        
        # Hareket tipi se√ßimi
        ctk.CTkLabel(
            content_frame,
            text="üîÑ ƒ∞≈ülem Tipi",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=2, column=0, padx=(0, 10), pady=10, sticky="e")
        
        # ƒ∞≈ülem butonlarƒ± i√ßin frame
        buttons_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        buttons_frame.grid(row=2, column=1, pady=10, sticky="ew")
        
        # Grid yapƒ±landƒ±rmasƒ± - her s√ºtuna e≈üit aƒüƒ±rlƒ±k ver
        buttons_frame.grid_columnconfigure(0, weight=1, uniform="button")
        buttons_frame.grid_columnconfigure(1, weight=1, uniform="button")
        buttons_frame.grid_columnconfigure(2, weight=1, uniform="button")
        
        # Satƒ±≈ü yeri se√ßimi (frame)
        sales_place_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        sales_place_frame.grid(row=3, column=0, columnspan=2, pady=10, sticky="ew")
        sales_place_frame.grid_remove()  # Ba≈ülangƒ±√ßta gizli
        
        # Satƒ±≈ü yeri se√ßimi
        ctk.CTkLabel(
            sales_place_frame,
            text="üè™ Satƒ±≈ü Yeri",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=0, column=0, padx=(0, 10), pady=10, sticky="e")
        
        sales_place = ctk.CTkComboBox(
            sales_place_frame,
            values=["Se√ßiniz...", "Maƒüaza", "Instagram", "Trendyol", "Hepsiburada", "Diƒüer"],
            height=40,
            font=self.FONTS['normal']
        )
        sales_place.grid(row=0, column=1, pady=10, sticky="ew")
        sales_place.set("Se√ßiniz...")
        
        def handle_movement(move_type, is_sale=False):
            try:
                product_id = product_combobox.get().split(" - ")[0]
                qty = int(quantity_entry.get())
                desc = description_entry.get("1.0", "end-1c")
                
                # Satƒ±≈ü i≈ülemi i√ßin
                if is_sale:
                    sales_place_frame.grid()  # Satƒ±≈ü yeri se√ßimini g√∂ster
                    if not sales_place.get() or sales_place.get() == "Se√ßiniz...":
                        messagebox.showerror("Hata", "L√ºtfen satƒ±≈ü yerini se√ßiniz!")
                        return
                    desc = f"Satƒ±≈ü Yeri: {sales_place.get()} | " + desc
                else:
                    sales_place_frame.grid_remove()  # Satƒ±≈ü yeri se√ßimini gizle
                
                if self.stock_manager.add_stock_movement(product_id, move_type, qty, desc):
                    messagebox.showinfo("Ba≈üarƒ±lƒ±", "Stok hareketi kaydedildi!")
                    self.show_dashboard()
            except ValueError:
                messagebox.showerror("Hata", "L√ºtfen ge√ßerli bir miktar giriniz!")
            except Exception as e:
                messagebox.showerror("Hata", str(e))
        
        # Giri≈ü butonu
        entry_button = ctk.CTkButton(
            buttons_frame,
            text="üì• Giri≈ü",
            font=ctk.CTkFont(family="Segoe UI", size=16, weight="bold"),  # 14'ten 16'ya √ßƒ±karƒ±ldƒ±
            height=40,
            width=120,
            fg_color=COLORS['accent'],
            command=lambda: handle_movement("giri≈ü")
        )
        entry_button.grid(row=0, column=0, padx=5, sticky="ew")
        
        # Satƒ±≈ü butonu
        sale_button = ctk.CTkButton(
            buttons_frame,
            text="üí∞ Satƒ±≈ü",
            font=ctk.CTkFont(family="Segoe UI", size=16, weight="bold"),  # 14'ten 16'ya √ßƒ±karƒ±ldƒ±
            height=40,
            width=120,
            fg_color="#2ecc71",  # Ye≈üil
            hover_color="#27ae60",  # Koyu ye≈üil
            command=lambda: handle_movement("√ßƒ±kƒ±≈ü", True)
        )
        sale_button.grid(row=0, column=1, padx=5, sticky="ew")
        
        # √áƒ±kƒ±≈ü butonu
        exit_button = ctk.CTkButton(
            buttons_frame,
            text="üì§ √áƒ±kƒ±≈ü",
            font=ctk.CTkFont(family="Segoe UI", size=16, weight="bold"),  # 14'ten 16'ya √ßƒ±karƒ±ldƒ±
            height=40,
            width=120,
            fg_color="#e74c3c",  # Kƒ±rmƒ±zƒ±
            hover_color="#c0392b",  # Koyu kƒ±rmƒ±zƒ±
            command=lambda: handle_movement("√ßƒ±kƒ±≈ü", False)
        )
        exit_button.grid(row=0, column=2, padx=5, sticky="ew")
        
        # A√ßƒ±klama
        ctk.CTkLabel(
            content_frame,
            text="üìù A√ßƒ±klama",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=4, column=0, padx=(0, 10), pady=10, sticky="e")
        
        description_entry = ctk.CTkTextbox(
            content_frame,
            height=80,
            font=self.FONTS['normal']
        )
        description_entry.grid(row=4, column=1, pady=10, sticky="ew")

    def show_product_list(self):
        self.clear_content()
        
        # Ana container
        container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=40, pady=20)
        
        # Ba≈ülƒ±k
        header_frame = ctk.CTkFrame(container, fg_color=COLORS['primary'], corner_radius=10)
        header_frame.pack(fill="x", padx=2, pady=2)
        
        ctk.CTkLabel(
            header_frame,
            text="üìã √úr√ºn Listesi",
            font=self.FONTS['header'],
            text_color=COLORS['text']
        ).pack(pady=15)
        
        # Filtre Frame
        filter_frame = ctk.CTkFrame(container, fg_color=COLORS['card'], corner_radius=10)
        filter_frame.pack(fill="x", pady=10)
        
        # Grid yapƒ±landƒ±rmasƒ±
        filter_frame.grid_columnconfigure((0,1,2,3,4,5), weight=1)
        
        # Kategori filtresi
        ctk.CTkLabel(
            filter_frame,
            text="üìÅ Kategori:",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=0, column=0, padx=10, pady=10)
        
        category_cb = ctk.CTkComboBox(
            filter_frame,
            values=self.categories,
            height=35,
            width=150
        )
        category_cb.grid(row=0, column=1, padx=10, pady=10)
        category_cb.set("T√ºm√º")
        
        # Cinsiyet filtresi
        ctk.CTkLabel(
            filter_frame,
            text="üë§ Cinsiyet:",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).grid(row=0, column=2, padx=10, pady=10)
        
        gender_cb = ctk.CTkComboBox(
            filter_frame,
            values=["T√ºm√º", "Erkek", "Kadƒ±n", "Unisex"],
            height=35,
            width=150
        )
        gender_cb.grid(row=0, column=3, padx=10, pady=10)
        gender_cb.set("T√ºm√º")
        
        # Tablo Frame
        table_frame = ctk.CTkFrame(container, fg_color=COLORS['card'], corner_radius=10)
        table_frame.pack(fill="both", expand=True, pady=10)
        
        # Tablo
        columns = ('ID', '√úr√ºn', 'Kategori', 'Cinsiyet', 'Beden', 'Renk', 'Alƒ±≈ü Fiyatƒ±', 'Satƒ±≈ü Fiyatƒ±', 'Stok', 'ƒ∞≈ülem')
        tree = self.create_table(table_frame, columns)
        
        def show_product_details(product_id):
            # ID'yi string'e √ßevir
            product_id = str(product_id)
            
            # √úr√ºn√º al
            product = self.stock_manager.products.get(product_id)
            if not product:
                print(f"√úr√ºn bulunamadƒ±: {product_id}")
                return
            
            print(f"√úr√ºn detaylarƒ± a√ßƒ±lƒ±yor: {product.name} (ID: {product_id})")
            
            # Detay penceresi
            detail_window = ctk.CTkToplevel(self)
            detail_window.title(f"√úr√ºn Detaylarƒ± - {product.name}")
            detail_window.geometry("1000x700")
            detail_window.grab_set()
            
            # Tab view
            tabs = ctk.CTkTabview(
                detail_window,
                fg_color=COLORS['card'],
                segmented_button_fg_color=COLORS['primary'],
                segmented_button_selected_color=COLORS['secondary']
            )
            tabs.pack(fill="both", expand=True, padx=20, pady=20)
            
            # √úr√ºn Bilgileri tab'ƒ±
            info_tab = tabs.add("üìã √úr√ºn Bilgileri")
            
            # Ana frame
            main_frame = ctk.CTkFrame(info_tab, fg_color="transparent")
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # Sol panel - Fotoƒüraf ve √∂zet istatistikler
            left_frame = ctk.CTkFrame(main_frame, width=300)
            left_frame.pack(side="left", fill="y", padx=10)
            
            # Fotoƒüraf alanƒ±
            photo_frame = ctk.CTkFrame(left_frame, width=250, height=250)
            photo_frame.pack(pady=20)
            photo_frame.pack_propagate(False)
            
            photo_label = ctk.CTkLabel(photo_frame, text="Fotoƒüraf Yok")
            photo_label.place(relx=0.5, rely=0.5, anchor="center")
            
            # Fotoƒürafƒ± g√∂ster
            if product.image_path and os.path.exists(product.image_path):
                try:
                    print(f"Fotoƒüraf y√ºkleniyor: {product.image_path}")  # Debug i√ßin
                    image = Image.open(product.image_path)
                    image.thumbnail((240, 240))
                    photo = ImageTk.PhotoImage(image)
                    photo_label.configure(image=photo, text="")
                    photo_label.image = photo
                except Exception as e:
                    print(f"Fotoƒüraf y√ºkleme hatasƒ±: {e}")
            
            # Saƒü panel - Detaylƒ± bilgiler
            right_frame = ctk.CTkFrame(main_frame)
            right_frame.pack(side="left", fill="both", expand=True, padx=10)
            
            # √úr√ºn bilgileri
            fields = [
                ('√úr√ºn ID:', product.id),
                ('√úr√ºn Adƒ±:', product.name),
                ('Kategori:', product.category),
                ('Cinsiyet:', product.gender),
                ('Bedenler:', product.size),
                ('Renk:', product.color),
                ('Alƒ±≈ü Fiyatƒ±:', f"{product.purchase_price:.2f} TL"),
                ('Satƒ±≈ü Fiyatƒ±:', f"{product.price:.2f} TL"),
                ('Stok:', str(product.stock_quantity))
            ]
            
            for i, (label, value) in enumerate(fields):
                ctk.CTkLabel(
                    right_frame,
                    text=label,
                    font=self.FONTS['normal'],
                    text_color=COLORS['text_secondary']
                ).grid(row=i, column=0, padx=10, pady=5, sticky="e")
                
                ctk.CTkLabel(
                    right_frame,
                    text=value,
                    font=self.FONTS['normal']
                ).grid(row=i, column=1, padx=10, pady=5, sticky="w")
            
            # Stok Ge√ßmi≈üi tab'ƒ±
            history_tab = tabs.add("üîÑ Stok Ge√ßmi≈üi")
            
            # Tablo
            columns = ('Tarih', 'ƒ∞≈ülem', 'Miktar', 'A√ßƒ±klama')
            history_tree = self.create_table(history_tab, columns)
            
            # Stok hareketlerini getir
            movements = self.stock_manager.get_product_movements(product_id)
            for movement in movements:
                self.insert_with_tags(history_tree, (
                    movement.date.strftime("%d.%m.%Y %H:%M"),
                    "üì• Giri≈ü" if movement.movement_type == "giri≈ü" else "üì§ √áƒ±kƒ±≈ü",
                    movement.quantity,
                    movement.description
                ))
        
        def filter_products(category, gender):
            # Tabloyu temizle
            for item in tree.get_children():
                tree.delete(item)
            
            # Tƒ±klama olayƒ±nƒ± ekle
            def on_click(event):
                item = tree.selection()
                if item:  # Se√ßili √∂ƒüe varsa
                    item = item[0]
                    product_id = tree.item(item)['values'][0]  # ID ilk s√ºtunda
                    print(f"√úr√ºne tƒ±klandƒ±: {product_id}")  # Debug i√ßin
                    show_product_details(product_id)
            
            tree.bind('<Double-1>', on_click)  # √áift tƒ±klama olayƒ±
            
            # Filtreleme
            for product in self.stock_manager.products.values():
                if (category == "T√ºm√º" or product.category == category) and \
                   (gender == "T√ºm√º" or product.gender == gender):
                    
                    # √úr√ºn bilgilerini tabloya ekle
                    item = tree.insert('', 'end', values=(
                        str(product.id),  # ID'yi string olarak ekle
                        product.name,
                        product.category,
                        product.gender,
                        product.size,
                        product.color,
                        f"{product.purchase_price:.2f} TL",
                        f"{product.price:.2f} TL",
                        product.stock_quantity,
                        "üëÅÔ∏è Detay"
                    ))
        
        # Filtrele butonu
        ctk.CTkButton(
            filter_frame,
            text="üîç Filtrele",
            font=self.FONTS['button'],
            height=35,
            width=120,
            command=lambda: filter_products(category_cb.get(), gender_cb.get())
        ).grid(row=0, column=4, padx=10, pady=10)
        
        # Ba≈ülangƒ±√ßta t√ºm √ºr√ºnleri g√∂ster
        filter_products("T√ºm√º", "T√ºm√º")
        
        # Tabloyu yerle≈ütir
        tree.pack(fill="both", expand=True, padx=10, pady=10)

    def show_reports(self):
        self.clear_content()
        
        # Ana container
        container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=40, pady=20)
        
        # Ba≈ülƒ±k
        header_frame = ctk.CTkFrame(container, fg_color=COLORS['primary'], corner_radius=10)
        header_frame.pack(fill="x", padx=2, pady=2)
        
        ctk.CTkLabel(
            header_frame,
            text="üìä Raporlar ve Analizler",
            font=self.FONTS['header'],
            text_color=COLORS['text']
        ).pack(pady=15)
        
        # Filtre Frame
        filter_frame = ctk.CTkFrame(container, fg_color=COLORS['card'], corner_radius=10)
        filter_frame.pack(fill="x", pady=10)
        
        # Tarih aralƒ±ƒüƒ± se√ßimi
        date_frame = ctk.CTkFrame(filter_frame, fg_color="transparent")
        date_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            date_frame,
            text="üìÖ Tarih Aralƒ±ƒüƒ±:",
            font=self.FONTS['normal']
        ).pack(side="left", padx=5)
        
        # Tarih se√ßiciler eklenecek...
        
        # √ñzet kartlarƒ±
        stats_frame = ctk.CTkFrame(container)
        stats_frame.pack(fill="x", pady=10)
        stats_frame.grid_columnconfigure((0,1,2,3), weight=1)
        
        # Grafik se√ßenekleri
        tabs = ctk.CTkTabview(
            container,
            fg_color=COLORS['card'],
            segmented_button_fg_color=COLORS['primary'],
            segmented_button_selected_color=COLORS['secondary'],
            segmented_button_selected_hover_color=COLORS['accent'],
            text_color=COLORS['text']
        )
        tabs.pack(fill="both", expand=True, pady=10)
        
        # Stok Durumu tab'ƒ±
        stock_tab = tabs.add("üì¶ Stok Durumu")
        self.create_stock_chart(stock_tab)
        
        # Satƒ±≈ü Trendi tab'ƒ±
        sales_tab = tabs.add("üí∞ Satƒ±≈ü Trendi")
        self.create_sales_chart(sales_tab)
        
        # Kategori Analizi tab'ƒ±
        category_tab = tabs.add("üìä Kategori Analizi")
        self.create_category_chart(category_tab)
        
        # Kar Analizi tab'ƒ±
        profit_tab = tabs.add("üìà Kar Analizi")
        self.create_profit_chart(profit_tab)
        
        # Alt butonlar
        button_frame = ctk.CTkFrame(container, fg_color="transparent")
        button_frame.pack(fill="x", pady=10)
        
        # Excel'e aktar butonu
        ctk.CTkButton(
            button_frame,
            text="üì• Excel'e Aktar",
            command=self.export_to_excel,
            width=200,
            fg_color=COLORS['accent'],
            hover_color=COLORS['secondary'],
            font=self.FONTS['button']
        ).pack(side="left", padx=5)
        
        # PDF Raporu olu≈ütur butonu
        ctk.CTkButton(
            button_frame,
            text="üìÑ PDF Raporu",
            command=self.create_pdf_report,
            width=200,
            fg_color=COLORS['primary'],
            hover_color=COLORS['secondary'],
            font=self.FONTS['button']
        ).pack(side="left", padx=5)

    def export_to_excel(self):
        # √úr√ºn verilerini DataFrame'e d√∂n√º≈üt√ºr
        products_data = []
        for product in self.stock_manager.products.values():
            products_data.append({
                'ID': product.id,
                '√úr√ºn': product.name,
                'Kategori': product.category,
                'Cinsiyet': product.gender,
                'Beden': product.size,
                'Renk': product.color,
                'Fiyat': product.price,
                'Stok': product.stock_quantity
            })
        
        df = pd.DataFrame(products_data)
        
        # Excel dosyasƒ±na kaydet
        filename = f"stok_raporu_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        df.to_excel(filename, index=False)
        messagebox.showinfo("Ba≈üarƒ±lƒ±", f"Rapor kaydedildi: {filename}")

    def auto_backup(self):
        backup_dir = "backups"
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        
        # JSON dosyalarƒ±nƒ± yedekle
        for file in ["products.json", "stock_movements.json"]:
            if os.path.exists(file):
                backup_file = f"{backup_dir}/{timestamp}_{file}"
                shutil.copy2(file, backup_file)

    def clear_content(self):
        # ƒ∞√ßerik alanƒ±nƒ± temizle
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def configure_treeview_style(self):
        style = ttk.Style()
        
        # Anti-aliasing i√ßin
        self.option_add('*Font', self.FONTS['normal'])
        
        # Treeview'in t√ºm beyaz alanlarƒ±nƒ± kaldƒ±r
        style.layout("Custom.Treeview", [
            ('Custom.Treeview.treearea', {'sticky': 'nswe'})
        ])
        
        # Ana tablo stili
        style.configure(
            "Custom.Treeview",
            background=COLORS['card'],
            foreground=COLORS['table_text'],
            fieldbackground=COLORS['card'],
            borderwidth=0,
            font=self.FONTS['table'],
            rowheight=40,
            relief='flat'
        )
        
        # Ba≈ülƒ±k stili
        style.configure(
            "Custom.Treeview.Heading",
            background=COLORS['table_header'],
            foreground=COLORS['table_header_text'],
            relief="flat",
            font=self.FONTS['table_header'],
            padding=12,
            borderwidth=0
        )
        
        # Ba≈ülƒ±klara hover efekti
        style.map(
            "Custom.Treeview.Heading",
            background=[('active', COLORS['secondary'])],
            foreground=[('active', COLORS['text'])]
        )
        
        # Se√ßili satƒ±r stili
        style.map(
            "Custom.Treeview",
            background=[('selected', COLORS['primary'])],
            foreground=[('selected', COLORS['text'])],
            fieldbackground=[('selected', COLORS['card'])]  # Se√ßili satƒ±r arka planƒ±
        )

    def create_table(self, parent, columns, height=5):
        # Tablo olu≈ütur
        tree = ttk.Treeview(
            parent,
            columns=columns,
            show='headings',
            height=height,
            style="Custom.Treeview"
        )
        
        # S√ºtunlarƒ± ayarla
        for col in columns:
            tree.heading(col, text=col.upper())
            tree.column(col, width=150, anchor="center")
        
        # Tek/√ßift satƒ±r renkleri i√ßin tag'ler
        tree.tag_configure('oddrow', background=COLORS['table_row_odd'], foreground=COLORS['table_text'])
        tree.tag_configure('evenrow', background=COLORS['table_row_even'], foreground=COLORS['table_text'])
        
        # Font boyutunu k√º√ß√ºlt
        style = ttk.Style()
        style.configure(
            "Custom.Treeview",
            font=('Segoe UI', 10),  # 12'den 10'a
            rowheight=35  # 40'tan 35'e
        )
        style.configure(
            "Custom.Treeview.Heading",
            font=('Segoe UI', 10, 'bold'),  # 12'den 10'a
            padding=10  # 12'den 10'a
        )
        
        # Scrollbar ekle
        scrollbar = ctk.CTkScrollbar(parent, command=tree.yview)
        scrollbar.pack(side="right", fill="y")
        tree.configure(yscrollcommand=scrollbar.set)
        
        return tree

    def create_table_frame(self, parent, title, icon, row, column):
        # Sabit boyutlu frame
        frame = ctk.CTkFrame(parent, fg_color=COLORS['card'], corner_radius=10, height=300)  # Sabit y√ºkseklik
        frame.grid(row=row, column=column, padx=5, pady=5, sticky="nsew")
        frame.grid_propagate(False)  # Boyutu sabitle
        
        # Ba≈ülƒ±k frame
        header = ctk.CTkFrame(frame, fg_color=COLORS['primary'], corner_radius=10)
        header.pack(fill="x", padx=2, pady=2)
        
        # Ba≈ülƒ±k
        ctk.CTkLabel(
            header,
            text=f"{icon} {title}",
            font=self.FONTS['subheader'],
            text_color=COLORS['text']
        ).pack(pady=10)
        
        return frame

    def insert_with_tags(self, tree, values):
        """Tek/√ßift satƒ±r renklerini uygula"""
        idx = len(tree.get_children()) + 1
        tag = 'evenrow' if idx % 2 == 0 else 'oddrow'
        tree.insert('', 'end', values=values, tags=(tag,))

    def create_stock_chart(self, parent):
        fig = Figure(figsize=(8, 4), facecolor=COLORS['card'])
        ax = fig.add_subplot(111)
        
        products = list(self.stock_manager.products.values())
        names = [p.name for p in products]
        stocks = [p.stock_quantity for p in products]
        
        bars = ax.bar(names, stocks)
        ax.set_facecolor(COLORS['card'])
        ax.set_title('√úr√ºn Stok Durumu', color=COLORS['text'], pad=20)
        ax.tick_params(axis='x', colors=COLORS['text'], rotation=45)
        ax.tick_params(axis='y', colors=COLORS['text'])
        ax.spines['bottom'].set_color(COLORS['border'])
        ax.spines['top'].set_color(COLORS['border'])
        ax.spines['left'].set_color(COLORS['border'])
        ax.spines['right'].set_color(COLORS['border'])
        
        # Renklendirme ve stil
        for bar in bars:
            bar.set_color(COLORS['primary'])
            bar.set_alpha(0.8)  # Biraz transparanlƒ±k
        
        # Izgara √ßizgileri
        ax.grid(True, color=COLORS['border'], linestyle='--', alpha=0.3)
        
        fig.tight_layout()  # Otomatik d√ºzenleme
        
        canvas = FigureCanvasTkAgg(fig, parent)
        canvas.draw()
        canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=10)

    def check_updates(self):
        try:
            from updater import check_for_updates
            check_for_updates()
        except Exception as e:
            print(f"G√ºncelleme kontrol√º yapƒ±lamadƒ±: {e}")

    def show_settings(self):
        self.clear_content()
        
        # Ba≈ülƒ±k
        header_frame = ctk.CTkFrame(self.content_frame, fg_color=COLORS['primary'], corner_radius=10)
        header_frame.pack(fill="x", padx=20, pady=2)
        
        ctk.CTkLabel(
            header_frame,
            text="‚öôÔ∏è Ayarlar",
            font=self.FONTS['header'],
            text_color=COLORS['text']
        ).pack(pady=15)
        
        # Ayarlar i√ßeriƒüi
        settings_frame = ctk.CTkFrame(self.content_frame, fg_color=COLORS['card'])
        settings_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # G√ºncelleme b√∂l√ºm√º
        update_frame = ctk.CTkFrame(settings_frame, fg_color="transparent")
        update_frame.pack(fill="x", padx=20, pady=20)
        
        # Ba≈ülƒ±k
        ctk.CTkLabel(
            update_frame,
            text="Program G√ºncellemesi",
            font=self.FONTS['subheader'],
            text_color=COLORS['text']
        ).pack(anchor="w", pady=(0, 10))
        
        # Mevcut s√ºr√ºm
        try:
            with open('version.json', 'r') as f:
                current_version = json.load(f)['version']
        except:
            current_version = "1.0.0"
        
        version_frame = ctk.CTkFrame(update_frame, fg_color="transparent")
        version_frame.pack(fill="x", pady=5)
        
        ctk.CTkLabel(
            version_frame,
            text="Mevcut S√ºr√ºm:",
            font=self.FONTS['normal'],
            text_color=COLORS['text_secondary']
        ).pack(side="left", padx=5)
        
        ctk.CTkLabel(
            version_frame,
            text=current_version,
            font=self.FONTS['normal']
        ).pack(side="left", padx=5)
        
        # G√ºncelleme butonu
        def check_update():
            try:
                from updater import check_for_updates
                check_for_updates()
            except Exception as e:
                messagebox.showerror("Hata", f"G√ºncelleme kontrol√º yapƒ±lamadƒ±: {e}")
        
        ctk.CTkButton(
            update_frame,
            text="üîÑ G√ºncellemeleri Kontrol Et",
            command=check_update,
            font=self.FONTS['normal'],
            height=40,
            fg_color=COLORS['primary'],
            hover_color=COLORS['secondary']
        ).pack(pady=20)
        
        # Otomatik g√ºncelleme kontrol√º
        auto_update_var = ctk.BooleanVar(value=True)
        
        auto_update_check = ctk.CTkCheckBox(
            update_frame,
            text="Program ba≈üladƒ±ƒüƒ±nda g√ºncellemeleri otomatik kontrol et",
            variable=auto_update_var,
            font=self.FONTS['normal'],
            text_color=COLORS['text'],
            fg_color=COLORS['primary']
        )
        auto_update_check.pack(pady=10)

def main():
    app = ModernStockApp()
    app.mainloop()

if __name__ == "__main__":
    main() 